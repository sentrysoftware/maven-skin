<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.sentrysoftware.doc</groupId>
		<artifactId>sentry-maven-skin-parent</artifactId>
		<version>5.0</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>sentry-maven-skin</artifactId>
	<packaging>pom</packaging>

	<name>Sentry Maven Skin</name>
	<description>
		The Sentry Maven Skin is a Maven skin for Maven-generated sites.
		It is based on the excellent Maven Reflow Skin developed by Andrius Velykis (http://andriusvelykis.github.io/reflow-maven-skin/).
		However, because Reflow is no longer maintained, we had to fork the projet and go with our own!
	</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
	</dependencies>

	<build>

		<plugins>

			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.6</version>
				<executions>

					<!-- initialize -->
					<!-- Install Node.js -->
					<execution>
						<id>install-nodejs</id>
						<phase>initialize</phase>
						<goals>
								<goal>install-node-and-npm</goal>
						</goals>
						<!-- optional: default phase is "generate-resources" -->
						<configuration>
							<nodeVersion>v14.15.3</nodeVersion>
						</configuration>
					</execution>

					<!-- generate-resources -->
					<!-- Run "npm install" -->
					<execution>
						<id>npm-install</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>

					<execution>
						<id>gulp</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>gulp</goal>
						</goals>
						<configuration>
							<!-- <arguments></arguments> -->
						</configuration>
					</execution>

				</executions>
				<configuration>
					<workingDirectory>${project.basedir}</workingDirectory>
					<!-- <installDirectory>${project.build.directory}</installDirectory> -->
				</configuration>
			</plugin>

			<!-- assembly -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.0.0</version>
				<executions>

					<!-- package -->
					<!-- Build a .jar from the content of target/dist -->
					<execution>
						<id>assemblyBeforeMinification</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<skipAssembly>false</skipAssembly>
							<descriptors>
								<descriptor>dist-to-jar.xml</descriptor>
							</descriptors>
							<attach>true</attach>
							<appendAssemblyId>false</appendAssemblyId>
						</configuration>
					</execution>

				</executions>
			</plugin>

			<!-- install -->
			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<executions>

					<!-- integration-test -->
					<!-- Copy the sentry-skin-velocity-tools JAR from our working directory to the repo -->
					<!-- We do that manually because the invoker:install goal (below) doesn't do it, as -->
					<!-- it's not the artifact we're working on, but one that is produced by our sibling -->
					<execution>
						<id>copy-workspace-tools</id>
						<phase>integration-test</phase>
						<goals>
							<goal>install-file</goal>
						</goals>
						<configuration>
							<localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>
							<file>${project.basedir}/../sentry-skin-velocity-tools/target/sentry-skin-velocity-tools-${project.version}.jar</file>
							<sources>${project.basedir}/../sentry-skin-velocity-tools/target/sentry-skin-velocity-tools-${project.version}-sources.jar</sources>
							<javadoc>${project.basedir}/../sentry-skin-velocity-tools/target/sentry-skin-velocity-tools-${project.version}-javadoc.jar</javadoc>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--  maven-invoker-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-invoker-plugin</artifactId>
				<version>2.0.0</version>
				<configuration>
					<debug>true</debug>
					<cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
					<pomIncludes>
						<pomInclude>**/pom.xml</pomInclude>
					</pomIncludes>
					<postBuildHookScript>verify</postBuildHookScript>
					<localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>
					<extraArtifacts>
						<extraArtifact>com.sentrysoftware.maven:patrolreport-maven-plugin:2.0</extraArtifact>
						<extraArtifact>org.apache.maven.doxia:doxia-core:1.10</extraArtifact>
						<extraArtifact>org.apache.maven.doxia:doxia-module-xhtml:1.10</extraArtifact>
						<extraArtifact>org.apache.maven.doxia:doxia-module-markdown:1.10</extraArtifact>
						<extraArtifact>com.vladsch.flexmark:flexmark-all:0.42.14</extraArtifact>
					</extraArtifacts>
					<settingsFile>src/it/settings.xml</settingsFile>
					<goals>
						<goal>clean</goal>
						<goal>site</goal>
					</goals>
				</configuration>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>install</goal>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


		</plugins>
	</build>

</project>
