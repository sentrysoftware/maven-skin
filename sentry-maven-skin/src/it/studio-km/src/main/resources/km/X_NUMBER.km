!PATROLV3.6.00i BC58AF70B4845FE944F92DD307B2100A
!#MSG_DOMAIN	swsy_sec
!++
!
! PATROL Session Knowledge Module
!
!--
!RELEASE	8.6.01
!REVISION	00
!PACKAGE	swsy
!DESCRIPTION	Monitoring Studio KM for PATROL
!PRODUCTCODE	swsy


VERSION 8.628

APPLICATIONS = {
  { NAME = "X_NUMBER",
	ACTIVE = True,
	SECURITY = False,
	PROPAGATE_STATE = True,
	CREATE_ICON = False,
	SUSPEND_GLOBAL_PARAMS = False,
	DISCOVERY_TIME = 0,
	DISCOVERY = PSL,
	PRE_DISCOVERY_TEXT =  1505460116 "# This object extracts numeric values from the underlying Monitor (File, Command Line, etc.).\
# How and where to extract the numeric values can be configured in detail.\
# Some additional operations can be performed on the numeric values before reporting on the Value parameter (conversion, delta, etc.).",
	DISCOVERY_TEXT =  1505460116 "#",
	HELP_FILE = "X_help.hlp",
	HELP_CONTEXT_ID = 200,
	OK_PICTURE = "X_NUMBER_ok",
	WRONG_PICTURE = "X_NUMBER_warn",
	INFO_BOX = {
		{ NAME = "ID", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1033381023 "# PATROL internal identifier of the Numeric Value extraction instance.\
requires X_shared;\
\
print (swSentryInfobox(get(\"sid\"), \"ID\"));"}
				}
		},
		{ NAME = "Parent ID", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1033381034 "# PATROL internal identifier of the parent object.\
requires X_shared;\
\
print (swSentryInfobox(get(\"sid\"), \"parentID\"));"}
				}
		},
		{ NAME = "Parent Type", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028900919 "# Type of the parent of the Numeric Value Extraction instance (File, Command Line, etc.).\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"parentType\"));"}
				}
		},
		{ NAME = "Line Mode", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028900949 "# Method used to select lines to search for the numeric value.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"lineMode\"));"}
				}
		},
		{ NAME = "Column Mode", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901039 "# Method chosen to search and extract the numeric value in the line.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"columnMode\"));"}
				}
		},
		{ NAME = "Parameter Type", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901051 "# Type of the parameter.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"parameterType\"));"}
				}
		},
		{ NAME = "Line Numbers", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901071 "# Line numbers from which the numeric value will be extracted.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"lineNumbers\"));"}
				}
		},
		{ NAME = "Regular Expression", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901104 "# Regular expression used to select the lines where the numeric value will be searched.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"regularExpression\"));"}
				}
		},
		{ NAME = "Skip Blank Lines", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901121 "# Indicates whether or not blank lines are skipped when searching for the numeric value.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"skipBlankLines\"));"}
				}
		},
		{ NAME = "After/Before", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901258 "# Searches for the numeric value either after or before the specified string.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"beforeAfter\"));"}
				}
		},
		{ NAME = "Specified String", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901151 "# Searches for the numeric value before or after this specified string.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"specifiedString\"));"}
				}
		},
		{ NAME = "Character Offset", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901187 "# Character offset in which the numeric value is searched.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"characterOffset\"));"}
				}
		},
		{ NAME = "Field Number", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901198 "# Number of the field in which the numeric value will be searched.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"fieldNumber\"));"}
				}
		},
		{ NAME = "Field Separators", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901209 "# Characters that separate the fields in a text line.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"fieldSeparator\"));"}
				}
		},
		{ NAME = "Unique Separator", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901219 "# Considers consecutive separators as a unique separator.\
requires X_number;\
\
print (swInfoboxNumber(get(\"sid\"), \"uniqueSeparator\"));"}
				}
		}

	},
	PARAMETERS = {
		{	NAME = "Present", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 200,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1542137302 "exit;"}
				},
			TITLE = "Present", UNITS = "{0 = Missing ; 1 = Present}",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%f", OUTPUT = OUTPUT_GRAPH,
			AUTO_RESCALE = False, Y_AXIS_MIN = 0, Y_AXIS_MAX = 1,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 1, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = False, MINIMUM = 0, MAXIMUM = 0, STATE = ALARM, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = False, MINIMUM = 1, MAXIMUM = 1, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		},
		{	NAME = "Value", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 200,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1542124365 "# Value returned by the Numeric Value extraction (no value will be reported if no number is found).\
# Value set by the collector of the parentï¿½s object."}
				},
			TITLE = "Value",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%f", OUTPUT = OUTPUT_GRAPH,
			AUTO_RESCALE = True, Y_AXIS_MIN = 0, Y_AXIS_MAX = 100,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = False, MINIMUM = 100, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		}

	}
  }
}
! 8842
