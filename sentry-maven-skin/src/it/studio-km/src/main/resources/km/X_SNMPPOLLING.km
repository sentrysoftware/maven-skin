!PATROLV3.6.00i 9C995318ECBFC63588548C5CC48BE6DD
!#MSG_DOMAIN	senms_sec
!++
!
! PATROL Session Knowledge Module
!
!--
!RELEASE	9.3.00
!REVISION	0
!PACKAGE	senms
!DESCRIPTION	Monitoring Studio KM for PATROL
!PRODUCTCODE	senms


VERSION 9.306

APPLICATIONS = {
  { NAME = "X_SNMPPOLLING",
	ACTIVE = True,
	SECURITY = False,
	PROPAGATE_STATE = True,
	CREATE_ICON = False,
	SUSPEND_GLOBAL_PARAMS = False,
	DISCOVERY_TIME = 0,
	DISCOVERY = PSL,
	PRE_DISCOVERY_TEXT =  1505460150 "# This Monitor polls an SNMP agent (on the monitored Host).\
# Polling a simple specified OID or an entire SNMP tables can be done.\
# The result of the SNMP polling can be parsed with String Searches, Numeric Value Extractions, Value Maps, Text Pre-Processing or Dynamic Object Builders.",
	DISCOVERY_TEXT =  1505460150 "#",
	HELP_FILE = "X_help.hlp",
	HELP_CONTEXT_ID = 198,
	OK_PICTURE = "X_SNMPPOLLING_ok",
	WRONG_PICTURE = "X_SNMPPOLLING_warn",
	COMMANDS = {
		{ NAME = "Refresh Parameters", AVAILABILITY = AVAILABLE_ONLINE, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1422965702 "# Re-polls the OID and refresh all parameters. All related Monitor instances and parameters will be refreshed as well.\
requires X_generic;\
\
swGenericRefreshParameters(get(\"appType\"), get(\"sid\"));"}
				}
		}

	},
	INFO_BOX = {
		{ NAME = "ID", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1033381243 "# PATROL internal identifier of the SNMP Polling instance.\
requires X_shared;\
\
print (swSentryInfobox(get(\"sid\"), \"ID\"));"}
				}
		},
		{ NAME = "Hostname", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1422965898 "# Hostname where the SNMP agent is running.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"hostname\"));"}
				}
		},
		{ NAME = "SNMP Version", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453904085 "# SNMP version used by the monitored device. Possible values: 1, 2c, or 3.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"snmpVersion\"));"}
				}
		},
		{ NAME = "Port", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1032268657 "# Port used to perform SNMP queries.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"port\"));"}
				}
		},
		{ NAME = "Timeout", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453904098 "# Number of seconds Monitoring Studio will wait for the completion of the SNMP polling (default: 120 seconds). This timeout must be long enough to complete the polling of an entire SNMP table.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"timeout\"));"}
				}
		},
		{ NAME = "Community", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1032268665 "# (SNMP v1 or 2c only) Community used to perform SNMP queries.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"community\"));"}
				}
		},
		{ NAME = "Username", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453909822 "# (SNMP v3 only) Username used to perform SNMP queries.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"username\"));"}
				}
		},
		{ NAME = "Authentication Protocol", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453909814 "# (SNMP v3 only) Protocol used to authenticate the SNMP v3 messages. Possible values: None, MD5, or SHA.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"authenticationProtocol\"));"}
				}
		},
		{ NAME = "Privacy Protocol", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453909807 "# (SNMP v3 only) Privacy protocol used to encrypt/decrypt SNMP v3 messages.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"privacyProtocol\"));"}
				}
		},
		{ NAME = "Context Name", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453909800 "# Context name accessible to the SNMP entity.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"contextName\"));"}
				}
		},
		{ NAME = "Polling Type", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453903977 "# Polling type.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"snmpMode\"));"}
				}
		},
		{ NAME = "OID", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453905937 "# OID that is polled.\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"oid\"));"}
				}
		},
		{ NAME = "OID Type", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1453906370 "# Type of the selected OID value (number or string).\
requires X_snmppolling;\
\
print(swInfoboxSNMPPolling(get(\"sid\"), \"oidtype\"));"}
				}
		}

	},
	PARAMETERS = {
		{	NAME = "ExecutionTime", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 198,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1428649593 "# Time taken by the SNMP polling to be executed.\
# Value set by snmpPollingColl."}
				},
			TITLE = "Execution Time", UNITS = "seconds",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%f", OUTPUT = OUTPUT_GRAPH,
			AUTO_RESCALE = True, Y_AXIS_MIN = 0, Y_AXIS_MAX = 2147483646,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = True, MINIMUM = 30, MAXIMUM = 2147483646, STATE = WARN, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = False, MINIMUM = 2147483646, MAXIMUM = 2147483646, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		},
		{	NAME = "Status", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 198,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1428649530 "# Status of the SNMP polling.\
# Value set by snmpPollingColl."}
				},
			TITLE = "Status", UNITS = "{0 = OK ; 1 = Suspicious ; 2 = Failed}",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%f", OUTPUT = OUTPUT_GRAPH,
			AUTO_RESCALE = False, Y_AXIS_MIN = 0, Y_AXIS_MAX = 2,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 2, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = True, MINIMUM = 1, MAXIMUM = 1, STATE = WARN, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = True, MINIMUM = 2, MAXIMUM = 2, STATE = ALARM, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		},
		{	NAME = "snmpPollingColl", PARAM_TYPE = COLLECTOR, ACTIVE = True, MONITOR = False, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 198,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1174917954 "requires X_genericcollector;\
\
swGenericCollector(get(\"appType\"), get(\"sid\"), get(\"name\"));"}
				},
			START = "ASAP",
			POLL_TIME = "600", EXTERNAL_POLLING = False
		},
		{	NAME = "Result", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 198,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1426669171 "# Content of the SNMP polling returned output.\
# Value set by snmpPollingColl."}
				},
			TITLE = "Result",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%s", OUTPUT = OUTPUT_TEXT,
			AUTO_RESCALE = True, Y_AXIS_MIN = 0, Y_AXIS_MAX = 100,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = False, MINIMUM = 100, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		},
		{	NAME = "Value", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 198,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1391089394 "# Value of the SNMP polling returned output.\
# Value set by snmpPollingColl.\
# Note: Only applicable to SNMPs of integer type."}
				},
			TITLE = "Value",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%f", OUTPUT = OUTPUT_GRAPH,
			AUTO_RESCALE = True, Y_AXIS_MIN = 0, Y_AXIS_MAX = 100,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = False, MINIMUM = 100, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		}

	}
  }
}
!33767
