#**********************************************************************
*
*    A few velocimacros to help site.vm
*
*    Perform also some "prep" work on the source HTML
*    - indexing
*    - add CSS classes where necessary
*    - add AngularJS directives where necessary
*
***********************************************************************



**
* Convenience directive to invoke a method and ignore the return value.
*
* Usage:
*	  #call ( $hashtable.put("foo", "bar") )
**
*##macro ( call $foo )#*
	*##if ($foo)#*
		// do nothing - the 'if' is for ignoring the return value
	*##end#*

*##end#*


**
* links
*
* Outputs a list of links
*
* $links must be a list of link objects with the below properties:
* - href: the URL to link to
* - name: the text to be displayed
* - target: the "frame" target of the URL (typically "_blank" for a new tab)
* - icon: to specify an icon to be displayed on the left of the text
*
* The "active" class is automatically put on the <li> element that contains
* the URL linking to the current page.
*
* Output example:
*
* <li><a href="other.html">Other Path</a></li>
* <li class="active"><a href="current.html">Current Path</a></li>
* <li><a href="pretty.html"><i class="fa fa-plus-sign"></i> Pretty</a></li>
**
*##macro ( links $links )#*

	*##foreach ( $item in $links )#*

		*##set ( $alignedHref = $PathTool.calculateLink( $item.href, $relativePath ) )#*
		*#<li#*
			*##if ( $alignedHref == $alignedFileName ) class="active"#end>#*
			*#<a #*
				*##if ( $item.href ) href="$alignedHref"#end#*
				*##if ( $item.target ) target="$target"#end#*
				*#>#*
				*##if ( $item.icon )<i class="$item.icon"></i> #end#*
				*#$item.name#*
			*#</a>#*
		*#</li>
	#end#*

*##end#*



/////////////////////////////////////////////////////
//
//   Initialization
//
/////////////////////////////////////////////////////

// Measure the time to process all of this
*##set($startTime = $date.systemTime)#*

// Process all ${properties} in the rendered HTML
*##set($bodyContent = $render.eval($bodyContent))#*
*##set($headContent = $render.eval($headContent))#*
*##set($shortTitle = $render.eval($shortTitle))#*

// Parse the body and header content
*##set($bodyElement = $htmlTool.parseContent($bodyContent))#*
*##set($headElement = $htmlTool.parseContent($headContent))#*

// Fix all protocol-relative links
*##set($bodyElement = $htmlTool.fixProtocolRelativeUrls($bodyElement))#*

// Check all images
*##set($bodyElement = $imageTool.checkImageLinks($bodyElement, ${project.reporting.outputDirectory}, $currentFileName))#*

// Convert all <IMG> to WEBP format (more efficient)
*##set($bodyElement = $imageTool.convertImagesToWebp($bodyElement, "img", ${project.reporting.outputDirectory}, $currentFileName))#*

// Specify the size of the images (makes the rendering more efficient)
*##set($bodyElement = $imageTool.explicitImageSize($bodyElement, "img", ${project.reporting.outputDirectory}, $currentFileName))#*

// Surround all <IMG> not marked as "inline" with a thumbnail
*##set($bodyElement = $imageTool.convertImagesToThumbnails(
		$bodyElement,
		"img:not(img[alt=inline])",
		${project.reporting.outputDirectory},
		$currentFileName,
		200, 0,
		"<zoomable style='background-image: url(%thumbSrc%); min-width: %thumbWidth%px; min-height: %thumbHeight%px; max-width: %imgWidth%px; max-height: %imgHeight%px;'></div>"
	)
)#*

// Bootstrap CSS class for tables
*##set($bodyElement = $htmlTool.addClass($bodyElement, "table.bodyTable", ["table", "table-striped", "table-hover"]))#*
*##set($bodyElement = $htmlTool.fixTableHeads($bodyElement))#*

// Convert old-style <a name=""> anchors to HTML5 <a id="">
*##set($bodyElement = $htmlTool.headingAnchorToId($bodyElement))#*

// Clean up IDs and corresponding <a href="#..."> references for unsupported characters
*##set($bodyElement = $htmlTool.fixIds($bodyElement))#*

// Make sure all headings have IDs
*##set($bodyElement = $htmlTool.ensureHeadingIds($bodyElement))#*

// Use angular-scroll for all internal (hash) links (notably for the automatic TOC)
*##set($bodyElement = $htmlTool.setAttr($bodyElement, "a[href^=#]", "du-smooth-scroll", ""))#*

// Extract the TOC and put it in a variable
*##set($tocElementList = $bodyElement.select("ul#toc"))#*
*##if (!$tocElementList.isEmpty())#*
	// Extract the TOC content
	// It will be reinserted in the document (so it will be in the final HTML twice:
	// once inline, just below the <h1>, and once to the right, as a sticky <div>)
	*##set($tocElement = $tocElementList.get(0))#*
	*##set($tocContent = $tocElement.clone().attr("id", "right-toc").outerHtml())#*
	// Wrap the inline TOC with the necessary HTML
	*##call($tocElement.wrap("<div class='toc-inline-container hidden-lg'>"))#*
	*##call($tocElement.parent().prepend("<div class='toc-heading'>Table of Contents</div>"))#*
*##else#*
	*##set($tocContent = "")#*
*##end#*

// Extract the keywords
*##set($keywordsArray = $htmlTool.getAttr($headElement, "meta[name=keywords]", "content"))#*
*##call($keywordsArray.add($decoration.getCustomValue("keywords")))#*
*##if (!$keywordsArray.isEmpty())#*
	*##set($keywords = $display.list($display.list($keywordsArray, ",").trim().split("\s*,\s*"), ","))#*
	*##set($keywordsArray = $keywords.split("\s*,\s*"))#*
*##end#*
*##set($headElement = $htmlTool.remove($headElement, "meta[name=keywords]") )#*

// Build ElasticLunr index
*##set($indexFile = "${project.reporting.outputDirectory}/index.json")#*
*##set($bodyText = $htmlTool.text($bodyElement, "body").get(0) )#*
*##call($indexTool.buildElasticLunrIndex($indexFile, $currentFileName, $shortTitle, $keywords, $bodyText))#*

// publishDate: either the one in site.xml, or current date
*##set($publishDateString = $decoration.getCustomValue("publishDate", $date.get($decoration.publishDate.format)))#*

// generator: who we are and where we come from
*##set($generator = "Maven Site Plugin, Doxia Site Renderer $doxiaSiteRendererVersion, Skin $decoration.skin.artifactId $decoration.skin.version")#*
*##if ($docRenderingContext.doxiaSource)#*
	*##set($generator = "$generator, from $docRenderingContext.parserId")#*
*##end#*
*##if($docRenderingContext.generator && $docRenderingContext.generator != "")#*
	*##set($generator = "$generator, with $docRenderingContext.generator")#*
*##end#*
*##set($headElement = $htmlTool.remove($headElement, "meta[name=generator]"))#*
*###
