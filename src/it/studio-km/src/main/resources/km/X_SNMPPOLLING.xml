<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<KMFile description="Monitoring Studio KM for PATROL" majorVersion="9" minorVersion="306" package="senms" productcode="senms" release="9.3.00" revision="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="KMFile.xsd">

  <Applications>
    <Application active="true" category="Application" createIcon="false" discovery="PSL" discoveryTime="0" displayName="Studio SNMP Polling" helpContextId="198" helpFile="X_help.hlp" name="X_SNMPPOLLING" okPicture="X_SNMPPOLLING_ok" propagateState="true" security="false" suspendGlobalParams="false" type="MONITOR" wrongPicture="X_SNMPPOLLING_warn">
      <PreDiscoveryText serial="1505460150"># This Monitor polls an SNMP agent (on the monitored Host).
# Polling a simple specified OID or an entire SNMP tables can be done.
# The result of the SNMP polling can be parsed with String Searches, Numeric Value Extractions, Value Maps, Text Pre-Processing or Dynamic Object Builders.</PreDiscoveryText>
      <DiscoveryText serial="1505460150">#</DiscoveryText>
      <MenuCommands>
        <MenuCommand annotate="false" autoID="false" available="AVAILABLE_ONLINE" id="" name="Refresh Parameters" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1422965702"># Re-polls the OID and refresh all parameters. All related Monitor instances and parameters will be refreshed as well.
requires X_generic;

swGenericRefreshParameters(get("appType"), get("sid"));</Commandtext>
            </Command>
          </BaseCommand>
        </MenuCommand>
      </MenuCommands>
      <InfoBoxes>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="ID" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1033381243"># PATROL internal identifier of the SNMP Polling instance.
requires X_shared;

print (swSentryInfobox(get("sid"), "ID"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Hostname" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1422965898"># Hostname where the SNMP agent is running.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "hostname"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="SNMP Version" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453904085"># SNMP version used by the monitored device. Possible values: 1, 2c, or 3.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "snmpVersion"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Port" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1032268657"># Port used to perform SNMP queries.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "port"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Timeout" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453904098"># Number of seconds Monitoring Studio will wait for the completion of the SNMP polling (default: 120 seconds). This timeout must be long enough to complete the polling of an entire SNMP table.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "timeout"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Community" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1032268665"># (SNMP v1 or 2c only) Community used to perform SNMP queries.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "community"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Username" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453909822"># (SNMP v3 only) Username used to perform SNMP queries.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "username"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Authentication Protocol" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453909814"># (SNMP v3 only) Protocol used to authenticate the SNMP v3 messages. Possible values: None, MD5, or SHA.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "authenticationProtocol"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Privacy Protocol" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453909807"># (SNMP v3 only) Privacy protocol used to encrypt/decrypt SNMP v3 messages.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "privacyProtocol"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Context Name" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453909800"># Context name accessible to the SNMP entity.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "contextName"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="Polling Type" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453903977"># Polling type.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "snmpMode"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="OID" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453905937"># OID that is polled.
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "oid"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
        <InfoBox annotate="false" autoID="false" available="AVAILABLE_ALWAYS" id="" name="OID Type" security="SECURITY_INHERIT">
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1453906370"># Type of the selected OID value (number or string).
requires X_snmppolling;

print(swInfoboxSNMPPolling(get("sid"), "oidtype"));</Commandtext>
            </Command>
          </BaseCommand>
        </InfoBox>
      </InfoBoxes>
      <Parameters>
        <Parameter active="true" autoRescale="true" check="false" format="%f" helpContextId="198" helpFile="X_help.hlp" historyLevel="false" historySpan="0" historyTime="600" monitor="true" name="ExecutionTime" output="OUTPUT_GRAPH" title="Execution Time" type="CONSUMER" units="seconds" yAxisMax="2147483646" yAxisMin="0">
          <ParamMetadata applicationCollectionStatus="false" availability="false" config="false" delta="false" graphByDefault="true" kpi="true" monitorForAbnormalities="true" normalDistribution="false" responseTime="true" statistical="false"/>
          <BaseCommand>
            <Command commandType="OS" computerType="ALL_COMPUTERS">
              <Commandtext serial="1428649593"># Time taken by the SNMP polling to be executed.
# Value set by snmpPollingColl.</Commandtext>
            </Command>
          </BaseCommand>
          <Ranges>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="100" minimum="0" name="BORDER" state="OK"/>
            <Range active="true" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="2147483646" minimum="30" name="ALARM1" state="WARN"/>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="2147483646" minimum="2147483646" name="ALARM2" state="OK"/>
          </Ranges>
        </Parameter>
        <Parameter active="true" autoRescale="false" check="false" format="%f" helpContextId="198" helpFile="X_help.hlp" historyLevel="false" historySpan="0" historyTime="600" monitor="true" name="Status" output="OUTPUT_GRAPH" title="Status" type="CONSUMER" units="{0 = OK ; 1 = Suspicious ; 2 = Failed}" yAxisMax="2" yAxisMin="0">
          <ParamMetadata applicationCollectionStatus="false" availability="true" config="false" delta="false" graphByDefault="false" kpi="false" monitorForAbnormalities="false" normalDistribution="true" responseTime="false" statistical="false"/>
          <BaseCommand>
            <Command commandType="OS" computerType="ALL_COMPUTERS">
              <Commandtext serial="1428649530"># Status of the SNMP polling.
# Value set by snmpPollingColl.</Commandtext>
            </Command>
          </BaseCommand>
          <Ranges>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="2" minimum="0" name="BORDER" state="OK"/>
            <Range active="true" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="1" minimum="1" name="ALARM1" state="WARN"/>
            <Range active="true" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="2" minimum="2" name="ALARM2" state="ALARM"/>
          </Ranges>
        </Parameter>
        <Parameter active="true" check="false" externalPolling="false" helpContextId="198" helpFile="X_help.hlp" monitor="false" name="snmpPollingColl" pollTime="600" start="ASAP" type="COLLECTOR">
          <ParamMetadata applicationCollectionStatus="false" availability="false" config="false" delta="false" graphByDefault="false" kpi="false" monitorForAbnormalities="false" normalDistribution="false" responseTime="false" statistical="false"/>
          <BaseCommand>
            <Command commandType="PSL" computerType="ALL_COMPUTERS">
              <Commandtext serial="1174917954">requires X_genericcollector;

swGenericCollector(get("appType"), get("sid"), get("name"));</Commandtext>
            </Command>
          </BaseCommand>
        </Parameter>
        <Parameter active="true" autoRescale="true" check="false" format="%s" helpContextId="198" helpFile="X_help.hlp" historyLevel="false" historySpan="0" historyTime="600" monitor="true" name="Result" output="OUTPUT_TEXT" title="Result" type="CONSUMER" yAxisMax="100" yAxisMin="0">
          <ParamMetadata applicationCollectionStatus="false" availability="false" config="false" delta="false" graphByDefault="false" kpi="false" monitorForAbnormalities="false" normalDistribution="false" responseTime="false" statistical="false"/>
          <BaseCommand>
            <Command commandType="OS" computerType="ALL_COMPUTERS">
              <Commandtext serial="1426669171"># Content of the SNMP polling returned output.
# Value set by snmpPollingColl.</Commandtext>
            </Command>
          </BaseCommand>
          <Ranges>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="100" minimum="0" name="BORDER" state="OK"/>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="100" minimum="0" name="ALARM1" state="OK"/>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="100" minimum="100" name="ALARM2" state="OK"/>
          </Ranges>
        </Parameter>
        <Parameter active="true" autoRescale="true" check="false" format="%f" helpContextId="198" helpFile="X_help.hlp" historyLevel="false" historySpan="0" historyTime="600" monitor="true" name="Value" output="OUTPUT_GRAPH" title="Value" type="CONSUMER" yAxisMax="100" yAxisMin="0">
          <ParamMetadata applicationCollectionStatus="false" availability="false" config="false" delta="false" graphByDefault="true" kpi="false" monitorForAbnormalities="false" normalDistribution="true" responseTime="false" statistical="true"/>
          <BaseCommand>
            <Command commandType="OS" computerType="ALL_COMPUTERS">
              <Commandtext serial="1391089394"># Value of the SNMP polling returned output.
# Value set by snmpPollingColl.
# Note: Only applicable to SNMPs of integer type.</Commandtext>
            </Command>
          </BaseCommand>
          <Ranges>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="100" minimum="0" name="BORDER" state="OK"/>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="100" minimum="0" name="ALARM1" state="OK"/>
            <Range active="false" alarmWhen="ALARM_INSTANT" alarmWhenN="0" maximum="100" minimum="100" name="ALARM2" state="OK"/>
          </Ranges>
        </Parameter>
      </Parameters>
    </Application>
  </Applications>

</KMFile>
