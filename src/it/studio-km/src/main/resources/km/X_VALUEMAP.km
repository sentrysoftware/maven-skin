!PATROLV3.6.00i BC58AF70B4845FE944F92DD307B2100A
!#MSG_DOMAIN	senms_sec
!++
!
! PATROL Session Knowledge Module
!
!--
!RELEASE	9.4.00
!REVISION	0
!PACKAGE	senms
!DESCRIPTION	Monitoring Studio KM for PATROL
!PRODUCTCODE	senms


VERSION 9.406

APPLICATIONS = {
  { NAME = "X_VALUEMAP",
	ACTIVE = True,
	SECURITY = False,
	PROPAGATE_STATE = True,
	CREATE_ICON = False,
	SUSPEND_GLOBAL_PARAMS = False,
	DISCOVERY_TIME = 0,
	DISCOVERY = PSL,
	PRE_DISCOVERY_TEXT =  1492527720 "# This Monitor extracts values from the underlying Monitor (File, Command Line, etc.). and maps them to status values.",
	DISCOVERY_TEXT =  1492527720 "#",
	HELP_FILE = "X_help.hlp",
	HELP_CONTEXT_ID = 327,
	OK_PICTURE = "X_VALUEMAP_ok",
	WRONG_PICTURE = "X_VALUEMAP_warn",
	INFO_BOX = {
		{ NAME = "ID", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1033381023 "# PATROL internal identifier of the Value Map instance.\
requires X_shared;\
\
print (swSentryInfobox(get(\"sid\"), \"ID\"));"}
				}
		},
		{ NAME = "Parent ID", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1033381034 "# PATROL internal identifier of the parent object.\
requires X_shared;\
\
print (swSentryInfobox(get(\"sid\"), \"parentID\"));"}
				}
		},
		{ NAME = "Parent Type", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028900919 "# Type of the parent of the Value Map instance (File, Command Line, etc.).\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"parentType\"));"}
				}
		},
		{ NAME = "Line Mode", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028900949 "# Indicates the option selected to define the line(s) from which the searched values are extracted.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"lineMode\"));"}
				}
		},
		{ NAME = "Column Mode", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901039 "# Indicates the option selected to define the columns(s) from which the searched values are extracted.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"columnMode\"));"}
				}
		},
		{ NAME = "Line Numbers", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901071 "# Indicates the line number(s) from which the value to map is extracted.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"lineNumbers\"));"}
				}
		},
		{ NAME = "Regular Expression", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901104 "# Indicates the regular expression that needs to match the lines from which the value to map is extracted.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"regularExpression\"));"}
				}
		},
		{ NAME = "Skip Blank Lines", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901121 "# Indicates whether or not empty lines are ignored when searching for a value.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"skipBlankLines\"));"}
				}
		},
		{ NAME = "After/Before", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901258 "# Indicates if the value to map is located after or before the provided string.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"beforeAfter\"));"}
				}
		},
		{ NAME = "Specified String", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901151 "# Indicates the string after or before which the value to map is extracted.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"specifiedString\"));"}
				}
		},
		{ NAME = "Character Offset", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901187 "# Indicates the character offset specifying the position of the value to map.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"characterOffset\"));"}
				}
		},
		{ NAME = "Field Number", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901198 "# Indicates the number of the field where the value to map is located.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"fieldNumber\"));"}
				}
		},
		{ NAME = "Field Separators", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901209 "# Indicates the column or end of field separator specified by the user.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"fieldSeparator\"));"}
				}
		},
		{ NAME = "Unique Separator", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1028901219 "# Indicates whether or not multiple consecutive separators must be treated as a single one.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"uniqueSeparator\"));"}
				}
		},
		{ NAME = "Values Mapped to OK", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1487584967 "# Indicates the value(s) mapped to the OK status.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"okValues\"));"}
				}
		},
		{ NAME = "Values Mapped to Suspicious", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1487585077 "# Indicates the value(s) mapped to the Suspicious status.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"suspiciousValues\"));"}
				}
		},
		{ NAME = "Values Mapped to Failed", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1487585121 "# Indicates the value(s) mapped to the Failed status.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"failedValues\"));"}
				}
		},
		{ NAME = "Unknown Values are Mapped to", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1487585173 "# Indicate to which status the unknown values are mapped (OK, Suspicious or Failed).\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"unknownValuesMap\"));"}
				}
		},
		{ NAME = "Retained Value", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1487585202 "# Indicates which value is retained when multiple values matching the defined criteria are found.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"retainedValueTranslatedReport\"));"}
				}
		},
		{ NAME = "Status Information Map", AVAILABILITY = AVAILABLE_ALWAYS, SECURITY = SECURITY_INHERIT,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "PSL",
				  COMMAND_TEXT =  1487585243 "# Indicates the user-defined additional information reported by the Status Information parameter.\
requires X_valuemap;\
\
print (swInfoboxValueMap(get(\"sid\"), \"statusInformationMap\"));"}
				}
		}

	},
	PARAMETERS = {
		{	NAME = "StatusInformation", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 327,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1492527744 "# Additional information about the value mapping."}
				},
			TITLE = "Status Information",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%s", OUTPUT = OUTPUT_TEXT,
			AUTO_RESCALE = True, Y_AXIS_MIN = 0, Y_AXIS_MAX = 100,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = False, MINIMUM = 0, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = False, MINIMUM = 100, MAXIMUM = 100, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		},
		{	NAME = "Status", PARAM_TYPE = CONSUMER, ACTIVE = True, MONITOR = True, CHECK = False,
 HELP_FILE = "X_help.hlp",
 HELP_CONTEXT_ID = 327,
				BASE_COMMAND = {
				{ COMPUTER_TYPE = "ALL_COMPUTERS", COMMAND_TYPE = "OS",
				  COMMAND_TEXT =  1542204893 "# Status of the value mapping result."}
				},
			TITLE = "Status", UNITS = "{0 = OK ; 1 = Suspicious ; 2 = Failed}",
			HISTORY_TIME = "600", HISTORY_SPAN = 0, HISTORY_LEVEL = False,
			FORMAT = "%f", OUTPUT = OUTPUT_GRAPH,
			AUTO_RESCALE = False, Y_AXIS_MIN = 0, Y_AXIS_MAX = 2,
			RANGES = {
			  { NAME = "BORDER", ACTIVE = False, MINIMUM = 0, MAXIMUM = 2, STATE = OK, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM1", ACTIVE = True, MINIMUM = 1, MAXIMUM = 1, STATE = WARN, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  },
			  { NAME = "ALARM2", ACTIVE = True, MINIMUM = 2, MAXIMUM = 2, STATE = ALARM, ALARM_WHEN = ALARM_INSTANT, ALARM_WHEN_N = 0
			  }
			}
		}

	}
  }
}
!53060
