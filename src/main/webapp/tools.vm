#*

╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲
Sentry Maven Skin
჻჻჻჻჻჻
Copyright (C) 2017 - 2023 Sentry Software
჻჻჻჻჻჻
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱╲╱

*#
#**********************************************************************
*
*    A few velocimacros to help site.vm
*
*    Perform also some "prep" work on the source HTML
*    - indexing
*    - add CSS classes where necessary
*    - add AngularJS directives where necessary
*
***********************************************************************



**
* Convenience directive to invoke a method and ignore the return value.
*
* Usage:
*	  #call ( $hashtable.put("foo", "bar") )
**
*##macro ( call $foo )#*
	*##if ($foo)#*
		// do nothing - the 'if' is for ignoring the return value
	*##end#*

*##end#*


**
* links
*
* Outputs a list of links
*
* $links must be a list of link objects with the below properties:
* - href: the URL to link to
* - name: the text to be displayed
* - target: the "frame" target of the URL (typically "_blank" for a new tab)
*
* The "active" class is automatically put on the <li> element that contains
* the URL linking to the current page.
*
* Output example:
*
* <li><a href="other.html">Other Path</a></li>
* <li class="active"><a href="current.html">Current Path</a></li>
* <li><a href="pretty.html"><i class="fa fa-plus-sign"></i> Pretty</a></li>
**
*##macro(links $links)#*

	*##foreach($item in $links)#*

		// Calculate how to reach the menu item's link from where we are
		*##set($alignedHref = $PathTool.calculateLink($item.href, $relativePath))#*

		// Check whether this menu item should be set as "active", i.e.
		// the current page we're rendering matches with this menu item
		*##set($activeLink = false)#*
		*##if ($alignedHref == $alignedFileName)#*
			*##set($activeLink = true)#*
		*##end#*

		// <li> or <li class="active">
		*##if ($activeLink)<li class="active">#{else}<li>#end#*
			// The <a href="..." class="externalLink?" target="..."> link
			*#<a #*
				*##if ($item.href)href="$alignedHref"#end#*
				*##if($item.href && ($item.href.startsWith("http://") || $item.href.startsWith("https://")) && !($project.url && $item.href.startsWith($project.url)) && !($project.organization.url && $item.href.startsWith($project.organization.url))) class="externalLink"#end#*
				*##if ($item.target) target="$target"#end#*
				*#>#*
				*#$item.name#*
			*#</a>#*
		*#</li>
#*
	*##end#*

*##end#*

**
* leftMenu
*
* Macro that builds the left menu from $decoration.body.menus
*
**
*##macro(leftMenu)#*
	*##set($hrefList = [])#*
	*##foreach ($menu in $decoration.body.menus)
		<h5 class="text-uppercase">$menu.name</h5>
#*	*##leftMenuRecursive($menu.items, false)#*
	*##end#*
*##end#*

**
* leftMenuRecursive
*
* Recursive macro that creates the left menu with all the specified links
*
* The "active" class is automatically put on the <li> element that contains
* the URL linking to the current page.
*
**
*##macro(leftMenuRecursive $links $closeable)#*
*#
<ul class="nav nav-pills nav-stacked animate"#if ($closeable) ng-hide="hideSubItems"#end>
#*
*##foreach($item in $links)#*

		// Calculate how to reach the menu item's link from where we are
		*##set($alignedHref = $PathTool.calculateLink($item.href, $relativePath))#*

		// Check whether this menu item should be set as "active", i.e.
		// the current page we're rendering matches with this menu item...
		// or matches with any sub menu item
		*##set($activeLink = false)#*
		*##set($openLink = false)#*
		*##if ($alignedHref == $alignedFileName)#*
			*##set($activeLink = true)#*
		*##else#*
			*##foreach($subItem in $item.items)#*
				*##if ($alignedFileName == $PathTool.calculateLink($subItem.href, $relativePath)) #set($openLink = true)#end#*
			*##end#*
		*##end#*

		// Check if this link was already displayed, in which case we dismiss it
		*##if($hrefList.contains($item.href))#*
			*##set($skipItem = true)#*
		*##else#*
			*##set($skipItem = false)#*
			*##call($hrefList.add($item.href))#*
		*##end#*

		// <li> or <li class="active">
		*##if(!$skipItem || $openLink)#*
			*##if ($activeLink)<li class="active">#{else}<li>#end#*
				// The <a href="..." target="..."> link
				*#<a #*
					*##if ($item.href)href="$alignedHref"#end#*
					*##if ($item.target) target="$target"#end#*
					*##if ($activeLink) ng-click="hideSubItems = !hideSubItems"#end#*
					*#>#*
					// Icon (different for topics with subtopics)
					*##if ($item.items.empty)#*
						*##if ($item.href == "/" || $item.href == "index.html")#*
							*#<i class="fas fa-home"></i>#*
						*##else#*
							*#<i class="fas fa-file-alt"></i>#*
						*##end#*
					*##else#*
						*##if ($openLink || $activeLink)#*
							*#<i ng-class="hideSubItems ? 'fas fa-folder' : 'fas fa-folder-open'"></i>#*
						*##else#*
							*#<i class="fas fa-folder"></i>#*
						*##end#*
					*##end#*
					*# $item.name#*
					*##if (!$item.items.empty) <span class="badge">$item.items.size()</span>#end#*
				*#</a>#*
			*#</li>
#*
			// If link is active and has subitems, show them
			*##if (($openLink || $activeLink) && !$item.items.empty)#leftMenuRecursive($item.items, $activeLink)#end
#*	*##end#*
	*##end#*

*#</ul>
#*
*##end#*


/////////////////////////////////////////////////////
//
//   Initialization
//
/////////////////////////////////////////////////////

// Measure the time to process all of this
*##set($startTime = $date.systemTime)#*

// Process all ${properties} in the rendered HTML
*##set($bodyContent = $render.eval($bodyContent))#*
*##set($headContent = $render.eval($headContent))#*
*##set($shortTitle = $render.eval($shortTitle))#*

// Parse the body and header content
*##set($bodyElement = $htmlTool.parseContent($bodyContent))#*
*##set($headElement = $htmlTool.parseContent($headContent))#*

// Fix all protocol-relative links
*##set($bodyElement = $htmlTool.fixProtocolRelativeUrls($bodyElement))#*

// Replace old-style icon images (which don't exist in our skin) with corresponding Fontawesome icons
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=close.gif]", '<i class="fa-regular fa-rectangle-xmark"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=collapsed.gif]", '<i class="fa-solid fa-circle-chevron-up"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=expanded.gif]", '<i class="fa-solid fa-circle-chevron-down"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=external.png]", '<i class="fa-solid fa-globe"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=icon_error_sml.gif]", '<i class="fa-solid fa-circle-exclamation text-danger"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=icon_info_sml.gif]", '<i class="fa-solid fa-circle-info text-info"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=icon_success_sml.gif]", '<i class="fa-solid fa-circle-check text-success"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=icon_warning_sml.gif]", '<i class="fa-solid fa-triangle-exclamation text-warning"></i>', -1))#*
*##set($bodyElement = $htmlTool.replace($bodyElement, "img[src$=newwindow.gif]", '<i class="fa-solid fa-arrow-up-right-from-square"></i>', -1))#*

// Check all images
*##set($bodyElement = $imageTool.checkImageLinks($bodyElement, ${project.reporting.outputDirectory}, $currentFileName))#*

// Convert all <IMG> to WEBP format (more efficient)
*##set($bodyElement = $imageTool.convertImagesToWebp($bodyElement, "img", ${project.reporting.outputDirectory}, $currentFileName))#*

// Specify the size of the images (makes the rendering more efficient)
*##set($bodyElement = $imageTool.explicitImageSize($bodyElement, "img", ${project.reporting.outputDirectory}, $currentFileName))#*

// Surround all <IMG> not marked as "inline" with a thumbnail
*##set($bodyElement = $imageTool.convertImagesToThumbnails(
		$bodyElement,
		"img:not(img[alt=inline])",
		${project.reporting.outputDirectory},
		$currentFileName,
		200, 0,
		"<zoomable style='background-image: url(%thumbSrc%); min-width: %thumbWidth%px; min-height: %thumbHeight%px; max-width: %imgWidth%px; max-height: %imgHeight%px;'></zoomable>"
	)
)#*
// Present links as footnotes for printing
*##set($urlFootnoteMap = {})#*
*##set($footnoteCounter = 1)#*
*##set($aLinkList = $bodyElement.select("a[href]"))#*
*##if($aLinkList && !$aLinkList.isEmpty())#*
	*##foreach ($aLinkElement in $aLinkList)#*
		*##set($href = $aLinkElement.attr("href"))#*
		// For all external links, add the "externalLink" class
		// An external link is a URL starting with http(s)://, but not the URL to the project or organization
		// Maven Doxia actually already tries to do that, but it's not perfect
		// We're "fixing" this here, so remove the externalLink class when the link refers to the project's URL.
		*##if($href && ($href.startsWith("http://") || $href.startsWith("https://")) && !($project.url && $href.startsWith($project.url)) && !($project.organization.url && $href.startsWith($project.organization.url)))#*
			*##set($_ = $aLinkElement.addClass("externalLink"))#*
		*##else#*
			*##set($_ = $aLinkElement.removeClass("externalLink"))#*
		*##end#*
		*##if($href && !$href.startsWith("#") && !$href.startsWith("javascript:"))#*
			*##if($urlFootnoteMap[$href])#*
				*##set($footnoteIndex = $urlFootnoteMap[$href])#*
			*##else#*
				*##set($footnoteIndex = $footnoteCounter)#*
				*##set($urlFootnoteMap[$href] = $footnoteIndex)#*
				*##set($footnoteCounter = $footnoteCounter + 1)#*
			*##end#*
			*##set($_ = $aLinkElement.after("<sup class='visible-print-inline'>[$footnoteIndex]</sup>"))#*
		*##end#*
	*##end#*
*##end#*

// Bootstrap CSS class for tables
*##set($bodyElement = $htmlTool.addClass($bodyElement, "table.bodyTable", ["table", "table-striped", "table-hover"]))#*
*##set($bodyElement = $htmlTool.fixTableHeads($bodyElement))#*

// Convert old-style <a name=""> anchors to HTML5 <a id="">
*##set($bodyElement = $htmlTool.headingAnchorToId($bodyElement))#*

// Clean up IDs and corresponding <a href="#..."> references for unsupported characters
*##set($bodyElement = $htmlTool.fixIds($bodyElement))#*

// Make sure all headings have IDs
*##set($bodyElement = $htmlTool.ensureHeadingIds($bodyElement))#*

// Use angular-scroll for all internal (hash) links (notably for the automatic TOC)
*##set($bodyElement = $htmlTool.setAttr($bodyElement, "a[href^=#]", "du-smooth-scroll", ""))#*

// Extract the TOC and put it in a variable
*##set($tocElementList = $bodyElement.select("ul#toc"))#*
*##if (!$tocElementList.isEmpty())#*
	// Extract the TOC content
	// It will be reinserted in the document (so it will be in the final HTML twice:
	// once inline, just below the <h1>, and once to the right, as a sticky <div>)
	*##set($tocElement = $tocElementList.get(0))#*
	*##set($tocContent = $tocElement.clone().attr("id", "right-toc").outerHtml())#*
	// Wrap the inline TOC with the necessary HTML
	*##call($tocElement.wrap("<div class='toc-inline-container hidden-lg hidden-xs'>"))#*
	*##call($tocElement.parent().prepend("<div class='toc-heading'>Table of Contents</div>"))#*
*##else#*
	*##set($tocContent = "")#*
*##end#*

// Extract the keywords
*##set($keywordsArray = $htmlTool.getAttr($headElement, "meta[name=keywords]", "content"))#*
*##call($keywordsArray.add($decoration.getCustomValue("keywords")))#*
*##if (!$keywordsArray.isEmpty())#*
	*##set($keywords = $display.list($display.list($keywordsArray, ",").trim().split("\s*,\s*"), ","))#*
	*##set($keywordsArray = $keywords.split("\s*,\s*"))#*
*##end#*
*##set($headElement = $htmlTool.remove($headElement, "meta[name=keywords]") )#*

// Build ElasticLunr index
*##set($indexFile = "${project.reporting.outputDirectory}/index.json")#*
*##set($bodyText = $htmlTool.text($bodyElement, "body").get(0) )#*
*##call($indexTool.buildElasticLunrIndex($indexFile, $currentFileName, $shortTitle, $keywords, $bodyText))#*

// publishDate: either <custom><publishDate> in site.xml,
// or project.build.outputTimestamp defind in pom.xml, or current date
*##set($publishDateString = $decoration.getCustomValue("publishDate", $context.get("project.build.outputTimestamp")))#*
*##if($StringUtils.isBlank($publishDateString))#*
	*#$log.debug("No publishDate defined under <custom> in site.xml, and no project.build.outputTimestamp in pom.xml.")#*
	*#$log.debug("Will use current date, so the build is not reproducible.")#*
	*##set($publishDate = $date.systemDate)#*
*##else#*
	*##set($publishDate = $date.toDate($publishDateString))#*
*##end#*

// generator: who we are and where we come from
*##set($generator = "Maven Site Plugin, Doxia Site Renderer $doxiaSiteRendererVersion, Skin $decoration.skin.artifactId $decoration.skin.version")#*
*##if ($docRenderingContext.doxiaSource)#*
	*##set($generator = "$generator, from $docRenderingContext.parserId")#*
*##end#*
*##if($docRenderingContext.generator && $docRenderingContext.generator != "")#*
	*##set($generator = "$generator, with $docRenderingContext.generator")#*
*##end#*
*##set($headElement = $htmlTool.remove($headElement, "meta[name=generator]"))#*

// Additional links
*##set($additionalLinks = [])#*
*##if($decoration.getCustomChild("additionalLinks"))#*
	*##foreach($itemXml in $decoration.getCustomChild("additionalLinks").getChildren())#*
		*##set($item = {})#*
		*##foreach($itemChild in $itemXml.getChildren())#*
			*##call($item.put($itemChild.name, $itemChild.value))#*
		*##end#*
		*##call($additionalLinks.add($item))#*
	*##end#*
*##end
